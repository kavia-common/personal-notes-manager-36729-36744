{"is_source_file": true, "format": "Python", "description": "This file defines API route handlers for managing notes, including creating, listing, retrieving, updating, and deleting notes, using FastAPI framework with SQLAlchemy sessions.", "external_files": ["../database", "../schemas", "../crud"], "external_methods": ["get_db", "crud.create_note", "crud.list_notes", "crud.get_note", "crud.update_note", "crud.delete_note"], "published": ["router"], "classes": [], "methods": [{"name": "schemas.NoteRead create_note_endpoint(note_in: schemas.NoteCreate, db: Session = Depends(get_db))", "description": "Creates a new note and returns the created note.", "scope": "", "scopeKind": ""}, {"name": "List[schemas.NoteRead] list_notes_endpoint( skip: int = Query(0, ge=0, description=\"Number of records to skip\"), limit: int = Query(100, ge=1, le=1000, description=\"Max number of records to return\"), db: Session = Depends(get_db), )", "description": "Returns a paginated list of notes.", "scope": "", "scopeKind": ""}, {"name": "schemas.NoteRead get_note_endpoint( note_id: int = Path(..., ge=1, description=\"ID of the note to retrieve\"), db: Session = Depends(get_db), )", "description": "Retrieves a specific note by ID, raises 404 if not found.", "scope": "", "scopeKind": ""}, {"name": "schemas.NoteRead update_note_endpoint( note_id: int = Path(..., ge=1, description=\"ID of the note to update\"), note_in: schemas.NoteUpdate = ..., db: Session = Depends(get_db), )", "description": "Updates an existing note by ID, raises 404 if not found.", "scope": "", "scopeKind": ""}, {"name": "delete_note_endpoint( note_id: int = Path(..., ge=1, description=\"ID of the note to delete\"), db: Session = Depends(get_db), )", "description": "Deletes a note by ID, raises 404 if not found.", "scope": "", "scopeKind": ""}], "calls": ["crud.create_note", "crud.list_notes", "crud.get_note", "crud.update_note", "crud.delete_note"], "search-terms": ["notes API endpoints", "FastAPI notes routes", "CRUD notes FastAPI", "notes router", "notes backend"], "state": 2, "file_id": 9, "knowledge_revision": 28, "git_revision": "af296541da65c3c39067d9bd1d4672be396fcf6b", "revision_history": [{"19": ""}, {"25": "e0dbfdf6572db867e7ff00629b372078ea188882"}, {"26": "e0dbfdf6572db867e7ff00629b372078ea188882"}, {"27": "0f3f87eb77f3cfe55f652778dde9766f40527e3d"}, {"28": "af296541da65c3c39067d9bd1d4672be396fcf6b"}], "ctags": [{"_type": "tag", "name": "create_note_endpoint", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-36729-36744/notes_backend/src/api/routers/notes.py", "pattern": "/^def create_note_endpoint(note_in: schemas.NoteCreate, db: Session = Depends(get_db)) -> schemas./", "language": "Python", "typeref": "typename:schemas.NoteRead", "kind": "function", "signature": "(note_in: schemas.NoteCreate, db: Session = Depends(get_db))"}, {"_type": "tag", "name": "delete_note_endpoint", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-36729-36744/notes_backend/src/api/routers/notes.py", "pattern": "/^def delete_note_endpoint($/", "language": "Python", "kind": "function", "signature": "( note_id: int = Path(..., ge=1, description=\"ID of the note to delete\"), db: Session = Depends(get_db), )"}, {"_type": "tag", "name": "get_note_endpoint", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-36729-36744/notes_backend/src/api/routers/notes.py", "pattern": "/^def get_note_endpoint($/", "language": "Python", "typeref": "typename:schemas.NoteRead", "kind": "function", "signature": "( note_id: int = Path(..., ge=1, description=\"ID of the note to retrieve\"), db: Session = Depends(get_db), )"}, {"_type": "tag", "name": "list_notes_endpoint", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-36729-36744/notes_backend/src/api/routers/notes.py", "pattern": "/^def list_notes_endpoint($/", "language": "Python", "typeref": "typename:List[schemas.NoteRead]", "kind": "function", "signature": "( skip: int = Query(0, ge=0, description=\"Number of records to skip\"), limit: int = Query(100, ge=1, le=1000, description=\"Max number of records to return\"), db: Session = Depends(get_db), )"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-36729-36744/notes_backend/src/api/routers/notes.py", "pattern": "/^router = APIRouter($/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "update_note_endpoint", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-36729-36744/notes_backend/src/api/routers/notes.py", "pattern": "/^def update_note_endpoint($/", "language": "Python", "typeref": "typename:schemas.NoteRead", "kind": "function", "signature": "( note_id: int = Path(..., ge=1, description=\"ID of the note to update\"), note_in: schemas.NoteUpdate = ..., db: Session = Depends(get_db), )"}], "hash": "f9e78d25ee7b5f6ff8321d20a2f796bd", "format-version": 4, "code-base-name": "notes_backend", "filename": "notes_backend/src/api/routers/notes.py", "fields": [{"name": "router = APIRouter(", "scope": "", "scopeKind": "", "description": "unavailable"}]}